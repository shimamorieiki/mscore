{"version":3,"sources":["components/Ranking.js","actions/Ranking.js","containers/Ranking.js","containers/Nav.js","components/Nav.js","App.js","serviceWorker.js","reducers/shopping.js","reducers/Ranking.js","createStore.js","index.js","reducers/index.js"],"names":["Ranking","this","props","onMount","categoryId","nextProps","onUpdate","console","log","category","ranking","error","name","map","item","i","key","code","style","maxWidth","margin","Card","image","imageUrl","title","height","type","raised","color","fullWidth","href","url","React","Component","defaultProps","startRequest","payload","receiveData","response","finishRequest","fetchRanking","dispatch","getState","a","categories","shopping","find","id","replace","queryString","qs","stringify","appid","category_id","fetchJsonp","json","data","connect","state","ownProps","actions","onClick","path","push","width","List","button","to","primary","App","className","paddingLeft","left","marginTop","padding","component","render","match","params","Boolean","window","location","hostname","initialState","getRanking","itemLength","ResultSet","totalResultsReturned","index","Result","Code","Name","Url","Image","Medium","undefined","action","history","createBrowserHistory","store","preloadedState","reduxCreateStore","combineReducers","router","connectRouter","compose","applyMiddleware","routerMiddleware","logger","thunk","configureStore","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a57d67dd.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Card, { CardMedia, CardContent, CardActions } from 'material-ui/Card';\nimport Typograpy from 'material-ui/Typography';\nimport Button from 'material-ui/Button';\n\nexport default class Ranking extends React.Component {\n\n    componentWillUnmount() {\n        this.props.onMount(this.props.categoryId);\n    }\n\n    // componentWillMount() {\n    //     this.setState({\n    //         currentColor: this.props.defaultColor,\n    //         palette: 'rgb',\n    //     });\n    // }\n    // state = {\n    //     currentColor: this.props.defaultColor,\n    //     palette: 'rgb',\n    // };\n\n\n    componentWillReceiveProps(nextProps) {\n        if (this.props.categoryId !== nextProps.categoryId) {\n            this.props.onUpdate(nextProps.categoryId);\n        }\n    }\n\n\n    render() {\n        console.log(\"this is this prop\");\n\n        console.log(this.props);\n\n        console.log(\"ここまで\");\n\n\n        const { category, ranking, error } = this.props;\n\n        return (\n            <div>\n                <h2>{\n                    typeof category !== 'undefined'\n                        ? `${category.name}のランキング`\n                        : ''\n                }</h2>\n\n                {(() => {\n                    if (error) {\n                        return <p>エラーが発生しました。リロードしてください</p>;\n                    } else if (typeof ranking === 'undefined') {\n                        return <p>読み込み中...</p>;\n                    } else {\n                        return ranking.map((item, i) => (\n                            <Card\n                                key={`rankning-item-${item.code}`}\n                                style={{ maxWidth: '500px', margin: '32px auto' }}\n                            >\n                                <CardMedia\n                                    image={item.imageUrl}\n                                    title={item.name}\n                                    style={{ height: '200px' }}\n                                />\n                                <CardContent>\n                                    <Typograpy type=\"title\">\n                                        {`${i + 1}位 ${item.name}`}\n                                    </Typograpy>\n                                </CardContent>\n                                <CardActions>\n                                    <Button\n                                        raised\n                                        color=\"secondary\"\n                                        fullWidth\n                                        href={item.url}>\n                                        商品ページへ\n                                        </Button>\n                                </CardActions>\n                            </Card>\n                        ));\n                    }\n                })()}\n            </div>\n        );\n    }\n}\n\nRanking.propTypes = {\n    categoryId: PropTypes.string,\n    onMount: PropTypes.func.isRequired,\n    onUpdate: PropTypes.func.isRequired,\n\n    category: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n    }),\n\n    ranking: PropTypes.arrayOf(\n        PropTypes.shape({\n            code: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            url: PropTypes.string.isRequired,\n            imageUrl: PropTypes.string.isRequired,\n        })\n    ),\n\n    error: PropTypes.bool.isRequired\n};\n\n\nRanking.defaultProps = {\n    categoryId: '1'\n};\n","import fetchJsonp from 'fetch-jsonp';\nimport qs from 'qs';\nimport { replace } from 'react-router-redux';\n\nconst API_URL = 'https://shopping.yahooapis.jp/ShoppingWebService/V1/json/categoryRanking'\nconst APP_ID = 'dj00aiZpPTREMmpuaFE4OU5ZSyZzPWNvbnN1bWVyc2VjcmV0Jng9NjE-';\n\nconst startRequest = category => ({\n    type: 'START_REQUEST',\n    payload: { category },\n});\n\nconst receiveData = (category, error, response) => ({\n    type: 'RECEIVE_DATA',\n    payload: { category, error, response },\n});\n\nconst finishRequest = category => ({\n    type: 'FINISH_REQUEST',\n    payload: { category },\n});\n\n\nexport const fetchRanking = categoryId => {\n    return async (dispatch, getState) => {\n        const categories = getState().shopping.categories;\n        const category = categories.find(category => (category.id === categoryId));\n        if (typeof category === 'undefined') {\n            dispatch(replace('/'));\n            return;\n        }\n\n        dispatch(startRequest(category));\n\n        const queryString = qs.stringify({\n            appid: APP_ID,\n            category_id: categoryId,\n        });\n\n        try {\n            const response = await fetchJsonp(`${API_URL}?${queryString}`);\n            const data = await response.json();\n            dispatch(receiveData(category, null, data));\n        } catch (error) {\n            dispatch(receiveData(category, error));\n        }\n        dispatch(finishRequest(category));\n    };\n};","import { connect } from 'react-redux';\nimport Ranking from '../components/Ranking';\nimport * as actions from '../actions/Ranking';\n\nconst mapStateToProps = (state, ownProps) => ({\n    categoryId: ownProps.categoryId,\n    category: state.Ranking.category,\n    ranking: state.Ranking.ranking,\n    error: state.Ranking.error\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onMount(categoryId) {\n        dispatch(actions.fetchRanking(categoryId));\n    },\n    onUpdate(categoryId) {\n        dispatch(actions.fetchRanking(categoryId));\n    }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Ranking);","import { connect } from 'react-redux';\nimport Nav from '../components/Nav';\nimport { push } from 'connected-react-router'\n\nconst mapStateToProp = state => ({\n    categories: state.shopping.categories\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onClick(path) {\n        dispatch(push(path));\n    }\n})\nexport default connect(mapStateToProp, mapDispatchToProps)(Nav);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Drawer from 'material-ui/Drawer';\nimport List, { ListItem, ListItemText } from 'material-ui/List';\n\n\nexport default function Nav({ categories, onClick }) {\n\n    const to = category => (\n        category.id === '1'\n            ? '/all'\n            : `category/${category.id}`\n    );\n\n    return (\n        <Drawer type=\"permanent\">\n            <List style={{ width: 240 }}>\n                {categories.map(category => (\n                    <ListItem\n                        button\n                        key={`nav-item-${category.id}`}\n                        onClick={() => onClick(to(category))}\n                    >\n                        <ListItemText primary={category.name} />\n                    </ListItem>\n\n                ))}\n            </List>\n        </Drawer>\n    );\n\n}\n\nNav.propTypes = {\n    categories: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired\n        })\n    ).isRequired,\n    onClick: PropTypes.func.isRequired\n};","import React, { Component } from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport Ranking from './containers/Ranking';\nimport Nav from './containers/Nav';\nimport Reboot from 'material-ui/Reboot';\nimport AppBar from 'material-ui/AppBar';\nimport Toolbar from 'material-ui/Toolbar';\nimport Typography from 'material-ui/Typography';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\" style={{ paddingLeft: 240 }}>\n        <Reboot />\n\n        <AppBar style={{ left: 240 }}>\n          <Toolbar>\n            <Typography type=\"title\" color=\"inherit\">\n              Yahooショップランキング\n            </Typography>\n          </Toolbar>\n        </AppBar>\n\n        <Nav />\n        <div style={{ marginTop: 64, padding: 32 }}>\n          <Switch>\n            <Route path=\"/all\" component={Ranking} />\n            <Route path=\"/category/1\" render={() => <Redirect to=\"/all\" />} />\n            <Route path=\"/category/:id\" render={\n              ({ match }) => <Ranking categoryId={match.params.id} />\n            } />\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\n    categories: [\n        {\n            id: '1',\n            name: 'すべてのカテゴリ'\n        },\n        {\n            id: '2502',\n            name: 'パソコン、周辺機器'\n        },\n        {\n            id: '10002',\n            name: '本、雑誌、コミック'\n        }\n    ]\n};\n\n\nexport default () => initialState;","// import { Action } from \"history\";\n\nconst getRanking = response => {\n\n    const ranking = [];\n    const itemLength = response.ResultSet.totalResultsReturned;\n\n    for (let index = 0; index < itemLength; index++) {\n        const item = response.ResultSet['0'].Result[index + ''];\n        ranking.push({\n            code: item.Code,\n            name: item.Name,\n            url: item.Url,\n            imageUrl: item.Image.Medium\n        })\n    }\n    return ranking;\n};\n\nconst initialState = {\n    category: undefined,\n    ranking: undefined,\n    error: false\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case 'START_REQUEST':\n            return {\n                category: action.payload.category,\n                ranking: undefined,\n                error: false\n            };\n        case 'RECEIVE_DATA':\n            return action.payload.error\n                ? { ...state, error: true }\n                : {\n                    ...state,\n                    ranking: getRanking(action.payload.response)\n                };\n        default:\n            return state;\n    }\n}","import {\n    createStore as reduxCreateStore,\n    // combineReducers,\n    applyMiddleware,\n    compose\n} from 'redux';\n\nimport {\n    // routerReducer,\n    routerMiddleware\n} from 'connected-react-router';\nimport { createRootReducer } from './reducers';\nimport { createBrowserHistory } from 'history';\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\n\nexport const history = createBrowserHistory();\n\nexport function configureStore(preloadedState) {\n    const store = reduxCreateStore(\n        createRootReducer(history), // root reducer with router state\n        preloadedState,\n        compose(\n            applyMiddleware(\n                routerMiddleware(history), // for dispatching history actions\n                logger,\n                thunk,\n                // ... other middlewares ...\n            ),\n        ),\n    );\n    return store;\n}\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { ConnectedRouter } from 'connected-react-router';\n// import { createBrowserHistory } from 'history';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { configureStore, history } from './createStore';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ConnectedRouter history={history}>\n        <App />\n      </ConnectedRouter>\n    </Provider>\n  </React.StrictMode >,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router';\nimport { default as shopping } from './shopping';\nimport { default as Ranking } from './Ranking';\n\nexport const createRootReducer = (history) =>\n    combineReducers({\n        router: connectRouter(history),\n        shopping,\n        Ranking,\n    });\n\nexport { shopping };\nexport { Ranking };"],"sourceRoot":""}